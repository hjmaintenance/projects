@using MIT.Razor.Pages.Component
@using System.Data
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inherits CommonComponentBase


@if (IsVisible && _dt != null && _dt.Rows.Count > 0) {
  foreach (DataRow dr in _dt.Rows){

    <div id='border_@(dr["THREAD_NUM"]?.ToString())' class="notiBoard">

  <div class="board_box">

    <div class="close_box">
          <input type="checkbox" @onchange="@(async (e) => await OnCheckboxChanged(e, dr["THREAD_NUM"]?.ToString()))" onclick="$('#border_@(dr["THREAD_NUM"]?.ToString())').hide();" /><span>오늘 하루 보지 않기</span>
          <button class="close_btn" onclick="$('#border_@(dr["THREAD_NUM"]?.ToString())').hide();">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="m8.738 7.979 5.293-5.293-.011-.01-.7-.7-.01-.01-5.289 5.296-5.3-5.3-.01.01-.7.7L2 2.676l5.3 5.3L2 13.283l.01.01.707.707 5.3-5.3 5.293 5.293.707-.707.011-.01-5.29-5.297z" fill="#fff"></path></svg>
      </button>
    </div>
    <div class="board_content">

          @( new MarkupString(  dr["BOARD_CONTENT"]?.ToString() ) )

    </div>

  </div>

</div>

}

}

@code {
  [Parameter] public bool IsVisible{get;set;} = false;

  public DataTable _dt { get; set; }

  protected override async Task OnInitializedAsync() {

    if (QueryService == null) {      return ;    }

    DataTable dt_o = await QueryService.ExecuteDatatableAsync("P_HMI_COMMUNITY_BOARDLIST_POP01", new Dictionary<string, object?>() { });

    if (dt_o != null && dt_o.Rows.Count > 0) { IsVisible = true; }
    //

    dt_o.Columns.Add("SHOW");

    foreach (DataRow dr in dt_o.Rows) {
      dr["SHOW"] = "Y";
      string threadNum = dr["THREAD_NUM"]?.ToString();
      string isChecked = await JS.InvokeAsync<string>("getCookie", "hideNotification" + threadNum);
      if ((isChecked + "").ToLower() == "y" || (isChecked + "").ToLower() == "true" || (isChecked + "").ToLower() == "on") {
        dr["SHOW"] = "N";
      }
    }
   
    _dt = dt_o.Select("SHOW = 'Y'").CopyToDataTable();

    StateHasChanged();

  }


  private async Task OnCheckboxChanged(ChangeEventArgs e, string threadNum) {
    bool isChecked = (bool)e.Value;
    await JS.InvokeVoidAsync("setCookie", "hideNotification" + threadNum, isChecked.ToString(), 1);
    //if (isChecked) {
    //  IsVisible = false;
    //  StateHasChanged();
    //}
  }

}


