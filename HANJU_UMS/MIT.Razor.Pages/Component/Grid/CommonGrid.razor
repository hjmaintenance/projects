@using DevExpress.Blazor;
@using MIT.DataUtil.Common
@using System.IO
@using Microsoft.JSInterop
@inject IJSRuntime JS

@inherits CommonGridBase

@*



style="@(IsLayoutAuto ? $"--grid-width:100%;--grid-height:{(IsShowToolBar ? ControlHeight - 32 : ControlHeight)}px;--control-width:100%;--control-height:{ControlHeight}px;--grid-layout-width:100%;--grid-layout-height:{(IsShowToolBar ? ControlHeight - 32 : ControlHeight)}px" : 


$"--grid-width:{GridWidth}px;--grid-height:{GridHeight}px;--control-width:{ControlWidth}px;--control-height:{ControlHeight}px;--grid-layout-width:{GridLayoutWidth}px;--grid-layout-height:{GridLayoutHeight}px;")" 






*@

<div class="common-control-page-width common-control-page-height"        >

  @if (IsShowToolBar)
  {
    <DxToolbar CssClass="common-grid-toolbar-width common-grid-toolbar mit-grd-toolbar"


    ItemRenderStyleMode="@ToolbarRenderStyleMode.Plain"
               @ref="Toolbar_items">
      <Items  >
        @BeginToolbarTemplate
        <DxToolbarItem Text="조회" Click="@OnSearchButtonClick" IconCssClass="custom-grid-popup-toolbar-search" Visible="IsSearchButtonEnabled" />
        <DxToolbarItem Text="추가" Click="@OnAddButtonClick" IconCssClass="custom-grid-popup-toolbar-add" Visible="IsAddButtonEnabled" />
        <DxToolbarItem Text="저장" Click="@OnSaveButtonClick" IconCssClass="custom-grid-popup-toolbar-save" Visible="IsSaveButtonEnabled" />
        <DxToolbarItem Text="삭제" Click="@OnDeleteButtonClick" IconCssClass="custom-grid-popup-toolbar-delete" Visible="IsDeleteButtonEnabled" />
       
        <DxToolbarItem Text="엑셀" Click="@OnExportButtonClick" IconCssClass="custom-grid-popup-toolbar-export" 
        Alignment="ToolbarItemAlignment.Right" Visible="@(IsExportButtonEnabled || IsExportXlsxEnabled )" >
          <i class="bi bi-cloud-download"></i>
        </DxToolbarItem>
        @* <DxToolbarItem Text="Pdf" Click="@OnExportPdfClick" IconCssClass="custom-grid-popup-toolbar-export" *@
        @* Alignment="ToolbarItemAlignment.Right" Visible="IsExportPDFEnabled"> *@
        @*   <i class="bi bi-filetype-pdf"></i> *@
        @* </DxToolbarItem> *@
        @* <DxToolbarItem Text="Excel" Click="@OnExportExcelClick" IconCssClass="custom-grid-popup-toolbar-export" *@
        @* Alignment="ToolbarItemAlignment.Right" Visible="IsExportXlsxEnabled"> *@
        @*   <i class="bi bi-file-earmark-excel"></i> *@
        @* </DxToolbarItem> *@
        @* <DxToolbarItem Text="Image" Click="@OnExportImageClick" IconCssClass="custom-grid-popup-toolbar-export" *@
        @* Alignment="ToolbarItemAlignment.Right" Visible="IsExportImageEnabled"> *@
        @*   <i class="bi bi-filetype-png"></i> *@
        @* </DxToolbarItem> *@
        @* <DxToolbarItem Text="Doc" Click="@OnExportDocClick" IconCssClass="custom-grid-popup-toolbar-export" *@
        @*                Alignment="ToolbarItemAlignment.Right" Visible="IsExportDocEnabled"> *@
        @*   <i class="bi bi-filetype-docx"></i> *@
        @* </DxToolbarItem> *@
        @AfterToolbarTemplate
      </Items>
    </DxToolbar>
  }
  <div class="common-layout-grid">
    @*  @BandedHeaderTemplate *@

    @* EditorRenderMode="@GrdRenderMode"  *@

    @* SelectedDataItemChanged="@SelectedChange" *@

    
        @* AllowSelectRowByClick="true" *@
        

            @* AutoExpandAllGroupRows="true" *@


    <DxGrid @ref="Grid"
    Data="@_datatable"
    CssClass="@($"{CssClass} common-grid")"
            EditorRenderMode="@GrdRenderMode"
    ShowAllRows="false"
    SelectionMode="@SelectionMode"
    SelectAllCheckboxMode="@GridSelectAllCheckboxMode.AllPages"
    FocusedRowChanged="@OnFocusedRowChanged"
    RowClick="@RowClick"
    
    ColumnResizeMode="@GridColumnResizeMode.ColumnsContainer"
    RowDoubleClick="@OnRowDoubleClick"
            FocusedRowEnabled="@FocusedRowEnabled"
    TextWrapEnabled="false"
    CustomizeElement="OnCustomizeElement"
            SelectedDataItemChanged="@SelectedChange"
            AllowSelectRowByClick="true"
            AutoExpandAllGroupRows="true"
    VirtualScrollingEnabled="true"



    >

    @*
      
      ShowGroupPanel="true"
    *@




      @* <ToolbarTemplate>
            @ToolbarTemplate
            </ToolbarTemplate> *@
      <Columns>
        @if (!IsCheckBoxRightPosition)
        {
          <DxGridDataColumn FieldName="@CheckedFieldName"
          Width="50px"
          TextAlignment="GridTextAlignment.Center"
          FixedPosition="GridColumnFixedPosition.Left"
          Visible="@IsCheckBox"
          AllowSort="false">
            <HeaderCaptionTemplate>
              <DxCheckBox Checked="@IsAllChecked"
              Alignment="CheckBoxContentAlignment.Center"
              CheckedChanged="@((bool value) => OnAllCheckedChanged(value))"
              CheckType="CheckType.Checkbox" />
            </HeaderCaptionTemplate>
            <CellDisplayTemplate Context="context2">
              <DxCheckBox Checked="@context2?.GetRowValue(@CheckedFieldName).ToStringTrim("N")"
              ValueChecked="@("Y")"
              ValueUnchecked="@("N")"
              CheckedChanged="@((string value) => OnCheckedChanged(context2, value))"
              CheckType="CheckType.Checkbox" />
            </CellDisplayTemplate>
          </DxGridDataColumn>
        }
        @DataColumnsTemplate
        @foreach (var col in Columns)
        {
          <DxGridDataColumn FieldName="@col.FieldName"
          Caption="@col.Caption"
          Width="@($"{(col.Width <= 0 ? string.Empty : col.Width.ToString() + "px")}")"
          CaptionAlignment="@col.CaptionAlignment"
          AllowSort="@col.AllowSort"
          FixedPosition="@col.GridColumnFixedPosition"
          Visible="@col.Visible"
                            DataRowEditorVisible="false"
                            ReadOnly="true"
          TextAlignment="@col.TextAlignment">
            <CellDisplayTemplate Context="context2">
              @RenderRepositoryItem(@col.RepositoryItemAttribute, context2)
            </CellDisplayTemplate>
          </DxGridDataColumn>
        }
        @if (IsCheckBoxRightPosition)
        {
          <DxGridDataColumn FieldName="@CheckedFieldName"
          Width="50px"
          TextAlignment="GridTextAlignment.Center"
          FixedPosition="GridColumnFixedPosition.Right"
          Visible="@IsCheckBox"
          AllowSort="false">
            <HeaderCaptionTemplate>
              <DxCheckBox Checked="@IsAllChecked"
              Alignment="CheckBoxContentAlignment.Center"
              CheckedChanged="@((bool value) => OnAllCheckedChanged(value))"
              CheckType="CheckType.Checkbox" />
            </HeaderCaptionTemplate>
            <CellDisplayTemplate Context="context2">
              <DxCheckBox Checked="@context2?.GetRowValue(@CheckedFieldName).ToStringTrim("N")"
              ValueChecked="@("Y")"
              ValueUnchecked="@("N")"
              CheckedChanged="@((string value) => OnCheckedChanged(context2, value))"
              CheckType="CheckType.Checkbox" />
            </CellDisplayTemplate>
          </DxGridDataColumn>
        }
      </Columns>
      <TotalSummary>
        @TotalSummaryTemplate
      </TotalSummary>

    </DxGrid>
  </div>
</div>


@code{


  /// <summary>
  /// 툴바 엑셀 버튼 이벤트
  /// </summary>
  /// <param name="e"></param>
  /// <returns></returns>
  protected async Task OnExportButtonClick(ToolbarItemClickEventArgs e) {
    //if (string.IsNullOrEmpty(ExportFileName)) {
    //  ExportFileName = DateTime.Now.Ticks.ToString() + ".xlsx";
    //}
    //await ExportXlsx(ExportFileName);
    await OnExportFile("xlsx");
  }


  protected async Task OnExportPdfClick(ToolbarItemClickEventArgs e) {
    await OnExportFile("pdf");
  }

  protected async Task OnExportExcelClick(ToolbarItemClickEventArgs e) {
    await OnExportFile("xlsx");

  }
  protected async Task OnExportDocClick(ToolbarItemClickEventArgs e) {
    await OnExportFile("docx");
  }

  protected async Task OnExportImageClick(ToolbarItemClickEventArgs e) {
    await OnExportFile("png");
  }



  protected async Task OnExportFile(string dtype) {

    var fileName = ExportFileName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + "." + dtype;  //var fileName = ExportFileName + "_" + DateTime.Now.Ticks.ToString() + "." + dtype;
    
    string kkk = "";
    var jsonStr = GetGrdData(dtype, ref kkk);

    await JS.InvokeVoidAsync("downloadFileFromStream", fileName, jsonStr);

  }

  
  //cdy 특정컬럼제외 익스포팅 파일 추가
  protected async Task OnExportFile(string dtype, string[] hidColumns) {

    var fileName = ExportFileName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + "." + dtype;  //var fileName = ExportFileName + "_" + DateTime.Now.Ticks.ToString() + "." + dtype;

    string kkk = "";
    var jsonStr = GetGrdData(dtype, ref kkk, hidColumns);

    await JS.InvokeVoidAsync("downloadFileFromStream", fileName, jsonStr);

  }


}



<script>


    var resize_cnt = 0;
    function reportWindowSize(isNotReload) {
      // grid 크기 조절 자동처리.
      return;

    var h = $('.dxbl-tabs.dxbl-tabs-top.dxbl-sm.Top-Btn-nav').height() 
            - $('.mit-search-area').height() 
            - $('.layout-item.dxbl-gridlayout-item').eq(0).height()
            - 160;
    if( h == null || isNaN(h) || h <= 0 ) {return;}
    var mit_grid = $('.mit-grid');//.parents('.common-control-page-width');
      if( mit_grid.length > 0 ){
          resize_cnt = 0;
          mit_grid.height(h);

      }
      else{
          if( isNotReload != true || resize_cnt <= 5){
              setTimeout(()=>{
                  reportWindowSize(true);
              },100);
          }
          resize_cnt++;
      }
    }
    window.onresize = reportWindowSize;

    reportWindowSize();
</script>

<style>
   
    .common-control-page-width {
        width: var(--control-width);
        
    }

    .common-control-page-height {
        height: var(--control-height);
    }

    .common-grid-toolbar {
        border-color: lightgray !important;
        border:solid;
        border-width: 1px;
    }

    .common-grid-toolbar-width {
        width: var(--grid-layout-width);
    }

    .common-layout-grid {
        overflow: auto;
        width: var(--grid-layout-width);
        height: var(--grid-layout-height);
        margin: 0;
        padding: 0;
    }

    .common-grid-need-col-color {
       
    }

    .common-grid {
        width: var(--grid-width);
        height: var(--grid-height);
        margin: 0;
        padding: 0;
    }

    .common-grid .card {
            border-top-width: 0px;
            border-top-left-radius: 0px;
            border-top-right-radius: 0px;
        }

 

    .custom-grid-popup-toolbar-init,
    .custom-grid-popup-toolbar-add,
    .custom-grid-popup-toolbar-search,
    .custom-grid-popup-toolbar-save,
    .custom-grid-popup-toolbar-delete,
    .custom-grid-popup-toolbar-export {
        background-size: contain;
        mask-repeat: no-repeat;
        -webkit-mask-repeat: no-repeat;
        background-position: center center;
        background-color: currentColor;
        height: 16px;
        width: 16px;
        opacity: 0.7;
    }

    .custom-grid-popup-toolbar-init {
        -webkit-mask-image: url("images/lib/16InitIcon.png");
        mask-image: url("images/lib/16InitIcon.png");
    }

    .custom-grid-popup-toolbar-add {
        -webkit-mask-image: url("images/lib/16NewIcon.png");
        mask-image: url("images/lib/16NewIcon.png");
    }

    .custom-grid-popup-toolbar-search {
        -webkit-mask-image: url("images/lib/16SearchIcon.png");
        mask-image: url("images/lib/16SearchIcon.png");
    }

    .custom-grid-popup-toolbar-save {
        -webkit-mask-image: url("images/lib/16SaveIcon.png");
        mask-image: url("images/lib/16SaveIcon.png");
    }

    .custom-grid-popup-toolbar-delete {
        -webkit-mask-image: url("images/lib/16DeleteIcon.png");
        mask-image: url("images/lib/16DeleteIcon.png");
    }

    .custom-grid-popup-toolbar-export {
        -webkit-mask-image: url("images/lib/16exlsx.png");
        mask-image: url("images/lib/16exlsx.png");
    }
</style>
