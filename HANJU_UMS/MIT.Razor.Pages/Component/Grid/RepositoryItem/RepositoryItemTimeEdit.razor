@using DevExpress.Blazor;
@using MIT.DataUtil.Common;
@using System.Data;

@inherits RepositoryItemComponentBase

@if (ReadOnly){
  var dtObj = @CellContext?.GetRowValue(CellContext.DataColumn.FieldName); //.ToStringTrim()
  if (dtObj.GetType() == typeof(TimeSpan)) {
        <span>@(((TimeSpan)dtObj).ToString(DisplayFormat))</span>
  }
  else{
    <span>@(dtObj.ToStringTrim())</span>
  }
}
else if (IsEditCheck()){
    var datetime = CellContext?.GetRowValue(CellContext.DataColumn.FieldName);


  //_time = datetime.ToTime();


  _time = TimeSpan.Parse(datetime+"");




  <DxTimeEdit Time="@_time" DisplayFormat="@DisplayFormat"
              Format="@DisplayFormat"
              ScrollPickerFormat="@DisplayFormat"
              ReadOnly="@ReadOnly"
              Enabled="@Enable"
              TimeChanged="@((TimeSpan newValue) => OnTimeChanged(newValue))"
              
              ShowValidationIcon="@ShowValidationIcon"
              CssClass="txt_center" />


}
else{
    @CellContext?.GetRowValue(CellContext.DataColumn.FieldName).ToDateTime().ToString(DisplayFormat)
}

@code {

  [Parameter]
  public string? DisplayFormat { get; set; } = @"hh\:mm";
  [Parameter]  public string? StringFormat { get; set; } = "hh\\:mm";
  [Parameter]
  public bool? ShowValidationIcon { get; set; } = false;
  // [Parameter]
  // public string? EditValue {
  //   get {
  //     return _time.ToString(StringFormat);
  //   }
  //   set {
  //     _time = TimeSpan.Parse(value);
  //     StateHasChanged();
  //   }
  // }
  [Parameter]  public EventCallback<TimeSpan> TimeChanged { get; set; }

  protected void OnTimeChanged(TimeSpan time) {
    _time = time;



    var dataItem = CellContext.DataItem as DataRowView;
        dataItem[CellContext.DataColumn.FieldName] = _time.ToString(StringFormat);


    TimeChanged.InvokeAsync(time);
    StateHasChanged();
  }

  protected TimeSpan _time = GetNowTime();

  protected static TimeSpan GetNowTime() {
    return DateTime.Now.TimeOfDay;
  }

  public void SetNowTime() {
    _time = GetNowTime();
    //TimeChanged.InvokeAsync(_time);
    StateHasChanged();

  }



  protected void OnValueChanged(GridDataColumnCellDisplayTemplateContext? context, TimeSpan value) {
    if (context == null || context.DataItem == null)      return;

    var grd = context.Grid as DxGrid;
    var dataItem = context.DataItem as DataRowView;

    if (dataItem == null || grd == null)      return;

    dataItem["CHK"] = "Y";
    if (value.GetType() == typeof(TimeSpan)) {
            dataItem[context.DataColumn.FieldName] = _time.ToString(StringFormat); // value.ToString();

    } else {
      dataItem[context.DataColumn.FieldName] = _time;// value;
    }

    grd.SelectDataItem(dataItem);
  }
}