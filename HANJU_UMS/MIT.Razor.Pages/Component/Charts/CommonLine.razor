@using DevExpress.Blazor
@using MIT.DataUtil.Common;
@using System.Data;

@namespace MIT.Razor.Pages.Component.Charts

@inherits CommonLineBase

@if (_datatable != null)
{
    <DxChart @ref="@Chart" Data="@_datatable.AsEnumerable()" CssClass="@($"{CssClass} common-chart")" LabelOverlap="ChartLabelOverlap.Hide" Width="@WidthStr" Height="@HeightStr">
            
        <DxChartTitle Text="@ChartTitle">
            <DxChartSubTitle Text="@ChartSubTitle" />
        </DxChartTitle>

        @if (IsShowToolTip)
        {
            @if (ToolTipTemplate == null)
            {
                <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
                    <div style="margin: 0.75rem">
                        <div class="fw-bold">@context.Point.SeriesName</div>
                        <div>@context.Point.Argument : @context.Point.Value</div>
                    </div>
                </DxChartTooltip>
            }
            else
            {
                @ToolTipTemplate
            }
        }

        @if (IsShowLegend)
        {
            @if (LegendTemplate == null)
            {
                <DxChartLegend AllowToggleSeries="true"
                                Orientation="Orientation.Vertical"
                                HorizontalAlignment="HorizontalAlignment.Right">
                </DxChartLegend>
            }
            else
            {
                @LegendTemplate
            }
        }
        else
        {
            <DxChartLegend Visible="false" />
        }

        @foreach (var series in _datatable.AsEnumerable().GroupBy(row => row["Name"].ToString()))
        {
            <DxChartCommonSeries T="DataRow" TGroup="object" TArgument="object" TValue="object" 
                                    NameField='dr => series.Key' 
                                    ArgumentField='dr => dr["Argument"]'
                                    ValueField='dr => dr["Val"]'
                                    Filter='dr => dr["Name"].ToString() == series.Key.ToString()'>
                <SeriesTemplate Context="settings">
                    <DxChartLineSeries Settings="@settings">
                        <DxChartSeriesPoint Visible="true" HoverMode="ChartSeriesPointHoverMode.Point" />
                        <DxChartSeriesLabel Visible="@IsShowLineSeries" />
                    </DxChartLineSeries>
                </SeriesTemplate>
            </DxChartCommonSeries>
        }

        <DxChartArgumentAxis>
            <DxChartAxisLabel Visible="@IsShowArgumentAxisLabel" />
        </DxChartArgumentAxis>

        @if (IsScrollVisible)
        {
            <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"
                                       ValueAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"
                                       AllowDragToZoom="true"
                                       AllowMouseWheel="true"
                                       PanKey="ChartEventPanKey.Shift" />
            <DxChartScrollBarSettings ArgumentAxisScrollBarVisible="true"
                                      ArgumentAxisScrollBarPosition="ChartScrollBarPosition.Bottom" />
        }
        
    </DxChart>
}
<style>
    /*차트 컴포넌트에 스크롤바 생겨서 조치*/
    .dxbl-group {
        height: calc(100% + 10px);
    }
</style>