@using DevExpress.Blazor
@using MIT.DataUtil.Common;
@using System.Data;
@using System.Linq


@namespace MIT.Razor.Pages.Component.Charts

@inherits MitChartLineBase

@if (_datatable != null)
{
  <DxChart @ref="@Chart" Data="@_datatable.AsEnumerable()" CssClass="@($"{CssClass} common-chart")" LabelOverlap="ChartLabelOverlap.Hide" Width="@WidthStr" Height="@HeightStr">

    <DxChartTitle Text="@ChartTitle">
      <DxChartSubTitle Text="@ChartSubTitle" />
    </DxChartTitle>

    @if (IsShowToolTip)
    {
      @if (ToolTipTemplate == null)
      {
        <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
          <div style="margin: 0.75rem">
            <div class="fw-bold">@context.Point.SeriesName</div>
            <div>@context.Point.Argument : @context.Point.Value</div>
          </div>
        </DxChartTooltip>
      }
      else
      {
        @ToolTipTemplate
      }
    }

    @if (IsShowLegend)
    {
      @if (LegendTemplate == null)
      {
        <DxChartLegend AllowToggleSeries="true"
        Orientation="Orientation.Vertical"
        HorizontalAlignment="HorizontalAlignment.Right">
        </DxChartLegend>
      }
      else
      {
        @LegendTemplate
      }
    }
    else
    {
      <DxChartLegend Visible="false" />
    }


    @if ( !string.IsNullOrEmpty(YNames) )    {

      var ynames = YNames.Split(',');
      var yttls = YTitles.Split(',');




      @for ( int i = 0; i < ynames.Length; i++)
      {
        var ynm = ynames[i];
        var yttl = yttls[i];
        <DxChartLineSeries T="DataRow"
                           TArgument="string"
                           TValue="object"
                           Name="@yttl"
                           ArgumentField='dr => dr[XName].ToString() '
                           ValueField='dr => dr[ynm]'>
        </DxChartLineSeries>
      }

      //var nm_field = YNames.Split(',');

    




    }
    else
    {
      
        <DxChartLineSeries T="DataRow"
                           TArgument="string"
                           TValue="object"
                           Name="@YTitle"
                           ArgumentField='dr => dr[XName].ToString()'
                           ValueField='dr => dr[YName]'>
        </DxChartLineSeries>
      

    }



        <DxChartArgumentAxis>
            <DxChartAxisLabel Visible="@IsShowArgumentAxisLabel" />
        </DxChartArgumentAxis>

        @if (IsScrollVisible)
        {
            <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"
                                       ValueAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"
                                       AllowDragToZoom="true"
                                       AllowMouseWheel="true"
                                       PanKey="ChartEventPanKey.Shift" />
            <DxChartScrollBarSettings ArgumentAxisScrollBarVisible="true"
                                      ArgumentAxisScrollBarPosition="ChartScrollBarPosition.Bottom" />
        }
        
    </DxChart>
}