@using System.Collections.ObjectModel;
@using System.Data
@using MIT.DataUtil.Common
@using MIT.Razor.Pages.Component.DataEdits.Data
@namespace MIT.Razor.Pages.Component.DataEdits
<DxComboBox Data="@_dataSource"
            NullText="text..."
            FilteringMode="DataGridFilteringMode.Contains"
            Value="@SelectedItem"
            Enabled="@IsEnabled"
            ReadOnly="@IsReadOnly"
            EditFormat="@EditFormat"
            ValueChanged="@((ImageComboBoxData dataItem) => OnValueChanged(dataItem))">
    <Columns>
        @foreach (var col in Columns)
        {
            <DxListEditorColumn FieldName="@col.FieldName" Caption="@col.Caption" Width="@col.Width" Visible="@col.Visible" VisibleIndex="@col.VisibleIndex" />
        }
    </Columns>
</DxComboBox>
@foreach (var col in Columns)
{
    <span>
        FieldName : @col.FieldName <br />
        Caption : @col.Caption <br />
        Width : @col.Width <br />
        Visible : @col.Visible <br />
        VisibleIndex : @col.VisibleIndex
    </span>
}
@code {

    [Parameter]
    public string? DisplayFieldName { get; set; }
    [Parameter]
    public string? ValueFieldName { get; set; }
    [Parameter]
    public bool IsShowEmptyRow { get; set; } = true;
    [Parameter]
    public string EmptyRowName { get; set; } = "전체";
    [Parameter]
    public bool IsEnabled { get; set; } = true;
    [Parameter]
    public bool IsReadOnly { get; set; } = false;
    [Parameter]
    public bool IsFirstRowSelected { get; set; } = true;

    public object? EditValue
    {
        get
        {
            return SelectedItem?.Value;
        }
        set
        {
            if (value == null || string.IsNullOrEmpty(ValueFieldName))
            {
                SelectedItem = null;
                return;
            }

            var item = _dataSource.FirstOrDefault(w => w.Value.ToStringTrim().Equals(value.ToStringTrim()));
            SelectedItem = item;
            StateHasChanged();
        }
    }

    [Parameter]
    public EventCallback<ImageComboBoxData> ValueChanged { get; set; }

    public DataTable? DataSource
    {
        get { return _datatable; }
        set
        {
            if (IsShowEmptyRow && value != null && !string.IsNullOrEmpty(DisplayFieldName))
            {
                DataRow row = value.NewRow();
                row[DisplayFieldName] = EmptyRowName;
                value.Rows.InsertAt(row, 0);
            }
            
            InitGridDynamicColumnsSetting(value);
            _dataSource = ConvertDataSourceToObservableCollection(value);

            _datatable = value;


            StateHasChanged();

            StateHasChanged();
        }
    }

    public string? EditFormat { get; set; } = "{0}";

    protected ObservableCollection<DxListEditorColumn> Columns { get; set; } = new ObservableCollection<DxListEditorColumn>();
    protected ObservableCollection<ImageComboBoxData> _dataSource { get; set; } = new ObservableCollection<ImageComboBoxData>();
    protected DataTable? _datatable;

    public ImageComboBoxData? SelectedItem { get; protected set; }

    protected ObservableCollection<ImageComboBoxData> ConvertDataSourceToObservableCollection(DataTable? datatable)
    {
        ObservableCollection<ImageComboBoxData> list = new ObservableCollection<ImageComboBoxData>();

        if (ValueFieldName == null)
            throw new Exception("ValueFieldName는 필수 입니다.");

        if (datatable == null)
            return list;

        foreach (DataRow row in datatable.Rows)
        {
            var item = new ImageComboBoxData();
            item.Value = row[ValueFieldName];
            item.Row = row;

            list.Add(item);
        }

        return list;
    }

    protected void InitGridDynamicColumnsSetting(DataTable? dt)
    {
        if (ValueFieldName == null)
            throw new Exception("ValueFieldName는 필수 입니다.");

        if (dt == null)
            return;

        if (!dt.Columns.Contains("GUID"))
            dt.Columns.Add("GUID", typeof(string));

        foreach (DataRow row in dt.Rows)
        {
            row["GUID"] = Guid.NewGuid().ToString();
        }

        Columns.Clear();

        int visibleIndex = 0;
        foreach (DataColumn col in dt.Columns)
        {
            var column = new DxListEditorColumn();

            column.FieldName = col.ColumnName;
            column.VisibleIndex = visibleIndex;

            if (col.ColumnName.Contains("@@"))
            {
                // @@로 시작하는 컬럼명 처리
                column.FieldName = col.ColumnName.Replace("@@", "");
                column.Caption = col.ColumnName.Replace("@@", "");
                column.Visible = false;
            }
            else if (col.ColumnName == "GUID")
            {
                // 기본적으로 추가한 컬럼명 처리
                column.Visible = false;
            }
            else if (int.TryParse(col.ColumnName.Substring(0, 3), out int firstThreeDigits))
            {
                column.Caption = col.ColumnName.Substring(3);
                column.Width = ((firstThreeDigits % 100) * 10).ToString(); // 첫 세 자리 숫자의 두 자리를 Width로 설정
            }
            else
            {
                // 그 외 일반적인 컬럼명 처리
                column.Caption = col.Caption;
            }

            Columns.Add(column);

            if (col.ColumnName == DisplayFieldName) EditFormat = $"{{visibleIndex}}";
                
            visibleIndex++;
        }
    }

    protected void OnValueChanged(ImageComboBoxData dataItem)
    {
        SelectedItem = dataItem;
        ValueChanged.InvokeAsync(dataItem);
        StateHasChanged();
    }
}

<style>
    .combobox-item-template {
        display: inline-flex;
        align-items: center;
        width: 100%;
    }

        .combobox-item-template > img {
            width: 1rem;
            height: 1rem;
        }

    .combobox-item-template-image {
        margin: 0 5px 0 0;
    }
</style>