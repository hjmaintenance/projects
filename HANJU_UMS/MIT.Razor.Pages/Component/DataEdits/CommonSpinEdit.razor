@using MIT.DataUtil.Common
@using Microsoft.JSInterop
@namespace MIT.Razor.Pages.Component.DataEdits
<DxSpinEdit Mask="@mask"
            DisplayFormat="@displayFormat"
            ShowSpinButtons="@_showSpinButton"
            Enabled="@_enable"
            ReadOnly="@_readOnly"
            Increment="@increment"
            MinValue="@minValue"
            MaxValue="@maxValue"
            Value="@_val" 
            InputId="@inputId"
            ValueChanged="@((Decimal newValue) => OnValueChanged(newValue))" />
@code {

    [Parameter]
    public bool Enabled
    {
        get { return _enable; }
        set { _enable = value; StateHasChanged(); }
    }
    [Parameter]
    public bool ReadOnly 
    {
        get { return _readOnly; }
        set { _readOnly = value; StateHasChanged(); }
    }

    [Parameter]
    public bool showSpinButtons
    {
        get { return _showSpinButton; }
        set { _showSpinButton = value; StateHasChanged(); }
    }

    [Parameter]
    public Decimal EditValue
    {
        get
        {
            return _val;
        }
        set
        {
            _val = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public string mask { get; set; } = "n0";

    [Parameter]
    public string displayFormat { get; set; } = "n0";

    [Parameter]
    public string inputId { get; set; } = "";

    [Parameter]
    public Decimal increment { get; set; } = 1;

    [Parameter]
    public Decimal minValue { get; set; } = 0;

    [Parameter]
    public Decimal maxValue { get; set; } = 1000000000;

    [Parameter]
    public EventCallback<Decimal> ValueChanged { get; set; }

    protected bool _enable = true;
    protected bool _readOnly = false;
    protected bool _showSpinButton = true;

    protected Decimal _val = 0;

    protected void OnValueChanged(Decimal val)
    {
        _val = val;

        ValueChanged.InvokeAsync(val);
        StateHasChanged();
    }
}
