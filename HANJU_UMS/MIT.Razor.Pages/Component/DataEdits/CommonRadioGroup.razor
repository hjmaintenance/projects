@using System.Collections.ObjectModel;
@using System.Data
@using MIT.DataUtil.Common
@using MIT.Razor.Pages.Component.DataEdits.Data
@namespace MIT.Razor.Pages.Component.DataEdits
<DxRadioGroup Layout="@RadioGroupLayout.Horizontal" 
              Items="@ItemCollection"
              Value="@SelectedItem"
              ValueChanged="@((RadioGroupData dataItem) => OnValueChanged(dataItem))" />

@code {

    [Parameter]
    public string? DisplayFieldName { get; set; } = "DisplayName";
    [Parameter]
    public string? ValueFieldName { get; set; } = "Value";
    [Parameter]
    public bool IsFirstRowSelected { get; set; } = true;
    [Parameter]
    public RadioGroupData? SelectedItem { get; set; }
    [Parameter]
    public IEnumerable<RadioGroupData>? ItemCollection { get; set; }
    [Parameter]
    public EventCallback<RadioGroupData> ValueChanged { get; set; }

    public object? EditValue
    {
        get 
        {
            return SelectedItem?.Value;
        }
        set
        {
            if (value == null || string.IsNullOrEmpty(ValueFieldName))
            {
                SelectedItem = null;
                return;
            }

            var item = _dataSource.FirstOrDefault(w => w.Value.ToStringTrim().Equals(value.ToStringTrim()));
            SelectedItem = item;
            StateHasChanged();
        }
    }

    protected ObservableCollection<RadioGroupData> _dataSource { get; set; } = new ObservableCollection<RadioGroupData>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ItemCollection != null)
        {
            _dataSource = new ObservableCollection<RadioGroupData>(ItemCollection);
            if (_dataSource.Count > 0 && IsFirstRowSelected && SelectedItem == null)
            {
                SelectedItem = _dataSource.FirstOrDefault();
            }
        }
    }

    protected void OnValueChanged(RadioGroupData dataItem)
    {
        SelectedItem = dataItem;
        ValueChanged.InvokeAsync(dataItem);
        StateHasChanged();
    }
}