@using DevExpress.Blazor;
@using Microsoft.AspNetCore.Components.Routing;
@using MIT.Razor.Pages.Service;
@implements IDisposable
@inherits CommonComponentBase



@foreach (var item in _listMessageBoxItem)
{
    <DxPopup Visible="true"
             CssClass="MessagePopup"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             ShowCloseButton="false"
             HeaderText="@item.Header"
             AllowResize="true"
             AllowDrag="true"
             ShowFooter="true"
             Width="450"
             Height="203"
             ZIndex="100">
             
        <BodyContentTemplate>
            <DxMemo @bind-Text="@item.Message"
                    SizeMode="SizeMode.Large"
                    Rows="13"
                    ReadOnly="true"
                    Enabled="false"
                    ResizeMode="MemoResizeMode.Disabled">

            </DxMemo>
        </BodyContentTemplate>
        <FooterContentTemplate>
            @if (item.MsgButtons == CommonMsgButtons.OK)
            {
                <DxButton RenderStyle="ButtonRenderStyle.Primary"
                          Text="OK"
                          Click="@((e) => CloseCallBack(item, CommonMsgResult.OK, item.CloseCallBack))" />
            }
            else if (item.MsgButtons == CommonMsgButtons.OKCancel)
            {
                <DxButton RenderStyle="ButtonRenderStyle.Primary"
                          Text="OK"
                          CssClass="me-xxl-1"
                          Click="@((e) => CloseCallBack(item, CommonMsgResult.OK, item.CloseCallBack))" />
                <DxButton RenderStyle="ButtonRenderStyle.Primary"
                          Text="Cancel"
                          Click="@((e) => CloseCallBack(item, CommonMsgResult.Cancel, item.CloseCallBack))" />
            }
            else if (item.MsgButtons == CommonMsgButtons.YesNo)
            {

        <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Contained"
                  CssClass="bi bi-check-lg"
                  Text="Yes"
                  Click="@((e) => CloseCallBack(item, CommonMsgResult.Yes, item.CloseCallBack))" />
        <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Outline"
                  CssClass="bi bi-x-lg"
                  Text="Cancle"
                  Click="@((e) => CloseCallBack(item, CommonMsgResult.No, item.CloseCallBack))" />


            }
        </FooterContentTemplate>
    </DxPopup>
}

<style>
    .MessagePopup .dxbl-modal-content {
        Width :450px;
        Height:203px;    
    }

    .MessagePopup .dxbl-modal-header {

    }

    .MessagePopup .dxbl-modal-body {

    }

    .MessagePopup .dxbl-no-resize {
        /* background-color: white; */
        border:0;
        height: 80px;
    }

        .MessagePopup .dxbl-no-resize:focus {
            outline: none;           
            border: 0;
            --dxbl-text-edit-focus-shadow-color:none;
        }

    .dxbl-text-edit.dxbl-disabled::before {
        background-color: #fff !important;
    }
    .MessagePopup .dxbl-modal-body .dxbl-memo-edit {
        outline:none !important;
        --dxbl-text-edit-focus-shadow-color: rgb(255 255 255) !important;
        border:0;
        --dxbl-text-edit-disabled-opacity: 100%;
    }
 
    
    .MessagePopup .dxbl-modal-footer .dxbl-btn {
        /* background-color: #003985; */
        /* border-color: #003985; */
      margin-left:0.5rem;
    }

  .MessagePopup .dxbl-modal-footer .dxbl-btn>span {
    /* background-color: #003985; */
      /* border-color: #003985; */
      margin: 0 0.2rem;
  }

        .MessagePopup .dxbl-modal-footer .dxbl-btn:hover {
            /* background-color:#0b2a55;            */
            /* border-color: #0b2a55; */
        }
        




</style>

@code {

    // 메시지 박스 리스트
    private List<CommonMessageBoxItem> _listMessageBoxItem = new List<CommonMessageBoxItem>();

    protected override void OnInitialized()
    {
        var messageBoxService = MessageBoxService as ICommonMessageBoxSystem;
        // 메시지 박스 추가 이벤트 셋팅
        if (messageBoxService != null)
            messageBoxService.OnMessageProgressAsync += OnMessageProgressAsync;
        if (NavigationManager != null)
            NavigationManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        var messageBoxService = MessageBoxService as ICommonMessageBoxSystem;
        // 메시지 박스 추가 이벤트 삭제
        if (messageBoxService != null)
            messageBoxService.OnMessageProgressAsync -= OnMessageProgressAsync;
        if (NavigationManager != null)
            NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnMessageProgressAsync(CommonMsgProgressType type, CommonMessageBoxItem? item)
    {
        switch(type)
        {
            // 메시지 추가 일때
            case CommonMsgProgressType.Add:
                if (item != null)
                {
                    // 메시지 박스 정보 추가
                    _listMessageBoxItem.Add(item);
                    StateHasChanged();
                    // 메시지 박스 CloseTime 이 셋팅 되었을때
                    // 지정된 시간이 되면 자동 닫기 및 삭제
                    if (item.CloseTime > 0)
                    {
                        // 지정된 시간 만큼 멈춤
                        await Task.Delay(item.CloseTime);
                        // 지정된 시간이 만료 되면 팝업창 닫기 및 삭제
                        CloseCallBack(item, CommonMsgResult.OK, item.CloseCallBack);
                    }
                }
                break;
            case CommonMsgProgressType.Remove:
                break;
                //팝업 메시지 전체 삭제
            case CommonMsgProgressType.AllRemove:
                _listMessageBoxItem.Clear();
                break;
        }

        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _listMessageBoxItem.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// 팝업창 닫기
    /// </summary>
    /// <param name="item"></param>
    /// <param name="result"></param>
    /// <param name="callback"></param>
    protected void CloseCallBack(CommonMessageBoxItem item, CommonMsgResult result, EventCallback<CommonMsgResult> callback)
    {
        // 팝업창 삭제
        _listMessageBoxItem.Remove(item);
        StateHasChanged();
        // 닫힐때 callback 함수 호출
        callback.InvokeAsync(result);
    }
}