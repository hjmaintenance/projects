@using DevExpress.Blazor
@using MIT.Razor.Pages.Component.Grid
@using MIT.Razor.Pages.Component.Grid.RepositoryItem
@using MIT.Razor.Pages.Component.DataEdits
@using MIT.ServiceModel
@using MIT.UI.LIB.DataEdits
@using MIT.UI.LIB.Grid.RepositoryItem
@using MIT.Razor.Pages.Component.Popup
@using System.Text
@* @using DevExpress.AIIntegration.Blazor.HtmlEditor *@
@using DevExpress.Blazor.Office
@inject NavigationManager NavigationManager

@* @inject RptService rptService *@

@inherits Z9010MA1_POPBase
@{/*
    * 작성자명 : quristyle
    * 작성일자 : 25-02-03
    * 최종수정 : 25-02-03   
    * 화면ID : B4015MA1
    * 화면명 : 수용가 현황 
   * 프로시저 : P_HMI_COMMON_COMINFO_SELECT
  */}
<DxFormLayout CssClass="w-100">    


    @{ /* content area */ }

    <DxFormLayoutGroup CssClass="mit-pop-content-area" Decoration="FormLayoutGroupDecoration.None" ColSpanSm="12">

        <DxFormLayoutItem Caption="이름" ColSpanSm="3"><DxTextBox @bind-Text="@USER_NAME" Enabled='@(string.IsNullOrEmpty(COM_ID)?true:false)' /></DxFormLayoutItem>
        <DxFormLayoutItem Caption="ID" ColSpanSm="3"><DxTextBox @bind-Text="@USER_ID" Enabled='false' /></DxFormLayoutItem>

        @* <DxFormLayoutItem Caption="HTML 사용" ColSpanSm="2"><CommonCheckBox EditValue="@HTML_YN" /></DxFormLayoutItem> *@
        <DxFormLayoutItem Caption="POP 사용" ColSpanSm="2">
            <CommonCheckBox @ref="@USE_POP" CheckedChanged="POPCheckChanged"/>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="POP 만료일" ColSpanSm="4">
            <CommonDateEdit @ref="@POP_EXPIRE_DATE"/>
        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="제목" ColSpanSm="8"><DxTextBox @bind-Text="@BOARD_TITLE" /></DxFormLayoutItem>
        <DxFormLayoutItem Caption="이메일" ColSpanSm="4"><DxTextBox @bind-Text="@USER_EMAIL" /></DxFormLayoutItem>

        <DxFormLayoutItem Caption="" ColSpanSm="12" CaptionPosition="CaptionPosition.Vertical">

            <DxHtmlEditor @ref="BoardContCtl" Markup="@BOARD_CONTENT" Height="350px" CustomizeToolbar="@OnCustomizeToolbar"  
            MarkupChanged="ContChange"  

            >
            </DxHtmlEditor>

        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="" ColSpanSm="12" CaptionPosition="CaptionPosition.Vertical">

            <div id="overviewDemoDropZone" class="card custom-drop-zone rounded-3 w-100 m-0">
                <span class="drop-file-icon mb-3"></span>
                <span class="drop-file-label">Drag and Drop</span>
                <DxButton Id="overviewDemoSelectButton"
                CssClass="m-1"
                RenderStyle="ButtonRenderStyle.Primary"
                Text="Select File" />
            </div>
            <DxUpload Name="file"
            Visible="@UploadVisible"
            ExternalSelectButtonCssSelector="#overviewDemoSelectButton"
            ExternalDropZoneCssSelector="#overviewDemoDropZone"
            ExternalDropZoneDragOverCssClass="custom-drop-zone-hover"      
            MaxFileSize="15000000"
            UploadUrl="@GetUploadUrl("Upload/Upload/")"
            FileUploaded="FileUploadedCall"
            SelectedFilesChanged="@SelectedFilesChanged"      
            @ref="FileUploadComp"      
            >

            </DxUpload>

        </DxFormLayoutItem>

        <DxFormLayoutItem Caption="" ColSpanSm="12" CaptionPosition="CaptionPosition.Vertical">
            <MitFileListView FILE_GID=@FILE_GID IsDelVisible="true" />
        </DxFormLayoutItem>

    </DxFormLayoutGroup>

    <DxFormLayoutGroup CssClass="card-search-layout-group" Decoration="FormLayoutGroupDecoration.None" ColSpanSm="12">
        <DxFormLayoutItem ColSpanSm="12">
            <DxButton RenderStyle="ButtonRenderStyle.Primary"
            RenderStyleMode="ButtonRenderStyleMode.Contained"
            IconCssClass="main-toolbar-btn-icon-save"
            Text="저장"
            Click="btn_Save"
            CssClass="w-100 main-toolbar-btn" />
        </DxFormLayoutItem>
    </DxFormLayoutGroup>

</DxFormLayout>

<style>



    .custom-drop-zone {
    padding: 0 !important;
    border-style: dashed;
    border-width: 2px !important;
    height: 60px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: rgba(183, 183, 183, 0.1);
    }

    .custom-drop-zone.custom-drop-zone-hover {
    border-style: solid;
    }

    .custom-drop-zone svg {
    width: 42px;
    height: 42px;
    }

    .custom-drop-zone > *:not(#overviewDemoSelectButton) {
    pointer-events: none;
    }




    .drop-file-icon {
    background-size: contain;
    mask-repeat: no-repeat;
    -webkit-mask-repeat: no-repeat;
    background-position: center center;
    background-color: #ADB5BD;
    width: 48px;
    height: 48px;
    -webkit-mask-image: url("../images/icons/drop-file.svg");
    mask-image: url("../images/icons/drop-file.svg");
    }
    .drop-file-label {
    font-weight: 500;
    font-size: 1rem;
    }



</style>

@code {




    bool UploadVisible { get; set; } = false;
    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files) {
        UploadVisible = files.ToList().Count > 0;
        InvokeAsync(StateHasChanged);
    }

    protected string GetUploadUrl(string url) {
        if (QueryService_src == null) return "";
        return QueryService_src.GetHttpService().GetUrl() + url + "?fid=" + FILE_GID;
        // return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }


    private async Task FileUploadedCall(FileUploadEventArgs args)  {
        UploadFileInfo ufi = args.FileInfo;
        FILE_NAME = ufi.Name+""+   ufi.Type;
        FILE_SIZE = ufi.Size.ToString();
    }


    void OnCustomizeToolbar(IToolbar toolbar) {

        //툴바 전체를 숨기려면 groups clear 해 준다.
        //toolbar.Groups.Clear();


        // IBarGroup insertElementGroup = toolbar.Groups[HtmlEditorToolbarGroupNames.InsertElement];
        //     Removes the first item
        //     insertElementGroup.Items.Remove(0);
        //     Removes the "Insert Code Block" item
        //     insertElementGroup.Items.Remove(HtmlEditorToolbarItemNames.InsertCodeBlock);
        //     Removes all items
        //     insertElementGroup.Items.Clear();




        // IBarGroup fontGroup = toolbar.Groups[HtmlEditorToolbarGroupNames.Font];
        // fontGroup.IconUrl = "/images/text.png";
        // IBarItem fontNameItem = fontGroup.Items[HtmlEditorToolbarItemNames.FontName];
        // fontNameItem.Text = "Font Name:";
        // fontNameItem.Tooltip = "Changes the selected text's font name.";
    }
    private void POPCheckChanged(string value)
    {
        POP_EXPIRE_DATE.ReadOnly = value == "N";
    }
}