@{
    /*
    * 작성자명 : 김지수
    * 작성일자 : 25-02-21
    * 최종수정 : 25-03-13
    * 화면명 : 메인화면(한주 사용자)
    * 프로시저 :P_HMI_MAIN_ENTIRE_SEARCH, P_HMI_MAIN_ELEC_SEARCH, P_HMI_MAIN_STM_SEARCH,
    *           P_HMI_MAIN_6BLR_SEARCH, P_HMI_MAIN_7BLR_SEARCH,P_HMI_MAIN_8BLR_SEARCH,
    *           P_HMI_MAIN_9BLR_SEARCH, P_HMI_MAIN_10BLR_SEARCH, P_HMI_MAIN_CCPP_SEARCH,
    */
}

@using MIT.Razor.Pages.Component.Grid
@using MIT.Razor.Pages.Component.Grid.RepositoryItem
@using MIT.Razor.Pages.Component.DataEdits
@using Microsoft.JSInterop;
@inherits UM1010MA1Base
@inject IJSRuntime JS

@code{
    int Base = 5;
}
<DxFormLayout CssClass="w-100">
    @{ /* content area */ }
    <DxFormLayoutGroup CssClass="mit-content-area" Decoration="FormLayoutGroupDecoration.Card" ColSpanSm="12">
        @if (IsMobileMode)
        {
            @foreach (Mtab mtab in mTabList)
            {

                @*<DxFormLayoutGroup CssClass="mobile-tab-margin" Caption="@mtab.title" Decoration="FormLayoutGroupDecoration.Card" ColSpanSm="12" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.End" @bind-Expanded=mtab.IsExpend>
                    @foreach (Mlabel mlabel in mtab.mlabelList)
                    {
                        <MitCard Caption="@mlabel.name" UtilityType="@mlabel.utility" Unit="@mlabel.unit" @bind-Data=mlabel.data DataFormat="N1"/>
                    }
                </DxFormLayoutGroup> *@
                <DxFormLayoutGroup CssClass="mobile-tab-margin" Caption="@mtab.title" Decoration="FormLayoutGroupDecoration.Card" ColSpanSm="12" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.End" @bind-Expanded=mtab.IsExpend>
                    <div class="mobile-img-width" id="container-@mtab.title" onclick="@(()=>OpenImage(mtab.title))">
                        <svg class="svg-container" 
                        id="svg-@mtab.title"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 2000 1000"
                        preserveAspectRatio="none">
                            <!-- 배경 이미지 -->
                            <image x="0" y="0" href=@mtab.imgURL width="100%" height="100%" preserveAspectRatio="none" />
                            <!-- 텍스트 -->
                            @foreach (Mlabel mlabel in mtab.mlabelList)
                            {
                                <svg:text id="@mlabel.id" class="mlabel" text-anchor="end" x="@(decimal.Parse(mlabel.xx) * Base)" y="@(decimal.Parse(mlabel.yy) * Base)" fill=@(mlabel.color)>@(string.IsNullOrEmpty(mlabel.data.ToString()) ? "빈값" : String.Format("{0:N1}", mlabel.data))</svg:text>
                            }
                        </svg>
                    </div>
                </DxFormLayoutGroup>
            }
        }
        else
        {
            <DxFormLayoutTabPages CssClass="main-tabs" ScrollMode="TabsScrollMode.Swipe" ActiveTabIndexChanged="OnTabChanged">
                @foreach (Mtab mtab in mTabList)
                {
                    <DxFormLayoutTabPage Caption=@mtab.title>
                        <div class="image-container">
                            <svg class="svg-container"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 2000 1000"
                            preserveAspectRatio="none">
                                <!-- 배경 이미지 -->
                                <image x="0" y="0" href=@mtab.imgURL width="100%" height="100%" preserveAspectRatio="none" />
                                <!-- 텍스트 -->
                                @foreach (Mlabel mlabel in mtab.mlabelList)
                                {
                                    <svg:text id="@mlabel.id" class="mlabel" text-anchor="end" x="@(decimal.Parse(mlabel.xx) * Base)" y="@(decimal.Parse(mlabel.yy) * Base)" fill=@(mlabel.color)>@(string.IsNullOrEmpty(mlabel.data.ToString()) ? "빈값" : String.Format("{0:N1}", mlabel.data))</svg:text>
                                }
                            </svg>
                        </div>
                    </DxFormLayoutTabPage>
                }
            </DxFormLayoutTabPages>
        }
    </DxFormLayoutGroup>
    @if (isLoading)
    {


        <div class="loading-spinner">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>


    }



</DxFormLayout>

@code{
    private async Task OpenImage(string id)
    {
        // container-{Id} 규칙으로 지정한 요소를 JS 쪽에서 찾는다
        JS.InvokeVoidAsync("openSvgInNewWindow", $"container-{id}", id);
        
    }
}
<script>
    var newWindow;

    var _svgId;

    function update_new_window_body(){
        const svgElement = document.getElementById(_svgId);
        if (!svgElement) {
            console.error(`SVG element with ID ${_svgId} not found`);
            return;
        }
        // 새창 스타일
        newWindow.document.body.style.margin = '0';
        newWindow.document.body.style.padding = '20px';
        newWindow.document.body.style.backgroundColor = '#fff';
        newWindow.document.body.style.overflow = 'auto';

        // svg:text로 넘기면, 태그해석못함. text로 변환후 넘김
        const svgClone = svgElement.innerHTML.replace(/<(\/?)svg:/g, '<$1'); 
        newWindow.document.body.innerHTML = svgClone;



        
        // SVG 크기 조정을 위한 스크립트
        const resizeScript = newWindow.document.createElement('script');
        resizeScript.textContent = `
            var svg = document.querySelector('.svg-container');
            function resizeSvg() {
                const windowWidth = window.innerWidth - 40;
                const windowHeight = window.innerHeight - 40;
                const aspectRatio = 2000 / 1000;

                if (windowWidth / windowHeight > aspectRatio) {
                    svg.style.width = (windowHeight * aspectRatio) + 'px';
                    svg.style.height = windowHeight + 'px';
                } else {
                    svg.style.width = windowWidth + 'px';
                    svg.style.height = (windowWidth / aspectRatio) + 'px';
                }
            }

            resizeSvg();
            window.addEventListener('resize', resizeSvg);
        `;
        newWindow.document.body.appendChild(resizeScript);
    }




    function openSvgInNewWindow(svgId, title) {
        _svgId = svgId;
        const svgElement = document.getElementById(svgId);
        if (!svgElement) {
            console.error(`SVG element with ID ${svgId} not found`);
            return;
        }

        // 새 창 열기
        newWindow = window.open('', '_blank');
        if (!newWindow) {
            alert('팝업이 차단되었습니다. 팝업 차단을 해제해주세요.');
            return;
        }


        // 
        newWindow.document.title = title;

        // 필요한 CSS 스타일 추가
        newWindow.document.head.innerHTML = `
            <style>
                .svg-container {
                    width: 100%;
                    height: 100vh;
                    display: block;
                    border: 1px solid #ccc;
                }

                .mlabel {
                    font-size: 1.11rem;
                    fill: #df3030;
                    text-shadow: -1px 1px 2px #c7c0c0;
                }

                body {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
            </style>
        `;

        // body 설정
        update_new_window_body();
    }
</script>


    <style>

    .mobile-img-width{
        width: 100%;
    }
    .mobile-tab-margin{
        margin-top: calc(var(--dxbl-fl-group-spacing-y)* 0.6) !important;
        margin-bottom: calc(var(--dxbl-fl-group-spacing-y)* 0) !important;
    }

    .loading-spinner {
        position: fixed;
        top: calc(50% - 40px);
        left: calc(50% - 15px);
    }


  .main-tabs{

  }


   .main-tabs .image-container {
      /* min-width: 1386px; */
      /* min-height: 728px; */
      /* width: 1386px; */
      /* height: 728px; */
      /* max-width: 1386px; */
      /* max-height: 728px; */
    }
  }


  .main-tabs .image-container dxbl-form-layout-tab{
    overflow-x: auto;
  }

  

  /* .mit-crr-page{ */
  /*   overflow:hidden; */
  /* } */


  

  .svg-container {
    width: 100%;
    height: 100%;
    display: block;
    border: 1px solid #ccc;
  }

  .image-container .mlabel {
    font-size: 1.11rem;
    fill: #df3030;
    text-shadow: -1px 1px 2px #c7c0c0;
  }

  .image-container {
    width: auto;
    height: calc(100vh - 16.5rem);
    padding: 5px 0.8rem;
    width: 100%;
  }

</style>