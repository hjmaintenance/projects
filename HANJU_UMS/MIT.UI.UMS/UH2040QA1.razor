@{
    /*
    * 작성자명 : 김지수
    * 작성일자 : 25-01-31
    * 최종수정 : 25-02-11
    * 화면명 : 업체별 전기 공급량
    * 프로시저 : P_HMI_ELEC_COM_SERV_RST, P_HMI_ELEC_COM_SERV_COM_RST
    */
            }

@using MIT.Razor.Pages
@using MIT.Razor.Pages.Common
@using MIT.Razor.Pages.Component.Grid
@using MIT.Razor.Pages.Component.Grid.RepositoryItem
@using MIT.Razor.Pages.Component.DataEdits
@using static MIT.Razor.Pages.TrendCode
@inherits UH2040QA1Base

            @{
                string dateFormat = "yyyy-MM-dd";
}

<DxFormLayout CssClass="w-100">
    @{ /* search area */ }
    <DxFormLayoutGroup Caption="조회조건" CssClass="mit-search-area" Decoration="FormLayoutGroupDecoration.Card" ColSpanSm="12">
        <DxFormLayoutItem Caption="공급월" ColSpanSm="3"><CommonDateEdit @ref="@YYMM" DisplayFormat="@dateFormat"/></DxFormLayoutItem>
        <DxFormLayoutItem Caption="수용가" ColSpanSm="9"><MitTagBox CodeId="company2" Etc0="PW" @bind-Values="ComValues" /></DxFormLayoutItem>
    </DxFormLayoutGroup>

    @{ /* content area */ }
    <DxFormLayoutGroup Caption="업체별 전기 공급량" CssClass="mit-content-area" Decoration="FormLayoutGroupDecoration.Card" ColSpanSm="12">
        <DxFormLayoutItem ColSpanSm="12">
            <CommonGrid @ref="Grd1" CssClass="setting-program-grid mit-grid" 
            RowDoubleClick="OnRowDoubleClick"
            IsExportDocEnabled=false
            IsExportImageEnabled=false
            IsExportPDFEnabled=true
            IsExportXlsxEnabled=true
                  ExportFileName="업체별 전기 공급량"
            IsShowToolBar=true>
                <DataColumnsTemplate>
                    <DxGridDataColumn Width="120" Caption="회사명" FieldName="FDR_NM" Name="COM_NAME" TextAlignment="GridTextAlignment.Center" CaptionAlignment="GridTextAlignment.Center"><CellDisplayTemplate Context="context2"><RepositoryItemTextBox CellContext="context2" ReadOnly="true" /></CellDisplayTemplate></DxGridDataColumn>
                    @{
                        DateTime sm = DateTime.ParseExact(SearchedYYMM ?? DateTime.Today.ToString(dateFormat), dateFormat, null);
                        int daysInMonth = DateTime.DaysInMonth(sm.Year, sm.Month);
                    }
                    @for (int i = 0; i < 31; i++)
                    {
                        <DxGridDataColumn Caption="@( '`' + sm.ToString("MM") + "-" + (i+1).ToString("00"))" Name="@(SearchedYYMM + "-" + (i+1).ToString("00"))" Width="105" FieldName="@("DD_" + (i+1).ToString("00"))" TextAlignment="GridTextAlignment.Right" CaptionAlignment="GridTextAlignment.Center" Visible="@(daysInMonth > i)"><CellDisplayTemplate Context="context2"><RepositoryItemSpinEdit CellContext="context2" ReadOnly="true" DisplayFormat="N0" /></CellDisplayTemplate></DxGridDataColumn>
                    }
                </DataColumnsTemplate>
            </CommonGrid>
        </DxFormLayoutItem>
    </DxFormLayoutGroup>
</DxFormLayout>

<style>

</style>
@code {
    private void OnRowDoubleClick(GridRowClickEventArgs e)
    {
        if (CommonPopupService != null)
        {
            // 회사명 열은 눌러도 안나오게..
            if (e.Column.Name == "COM_NAME") return;

            // 소계 합계는 눌러도 안나오게..
            var com_name = (e.Grid.GetRowValue(e.VisibleIndex, "FDR_NM") + "");
            if (com_name == "합계") return;

            // com_id
            var com_id = (e.Grid.GetRowValue(e.VisibleIndex, "COM_ID") + "");


            // 이걸로 구분
            // e.Column

            // 모든 컬럼명이 날짜형식이므로 따로 검증하지않음
            DateTime compDateTime = DateTime.ParseExact(e.Column.Name, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None)
                                            .AddMonths(-1);

            TrendCode tc = new TrendCode() { ComId = com_id, FdrId = "", CompreDate = compDateTime, TrendType = TrendTypeEnum.Day, GaugeType = GAUGE_TYPE.PW};
            CommonPopupService.Show(typeof(UH1070QA1_POP), "Trend View", Width: 1280, Height: 740, Parameter: tc, CloseCallback: OnCloseCallback);
        }
    }


    protected async Task OnCloseCallback(PopupResult result)
    {
        if (result.PopupResultType != PopupResultType.OK) return;
        await Task.Delay(1);

    }





}